{"version":3,"sources":["components/Login/LoginFields/LoginFields.module.css","components/CreateAccount/CreateAccount.module.css","logo.svg","components/Login/LoginFields/LoginFields.js","components/Login/Login.js","components/CreateAccount/CreateAccount.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoginFields","props","className","Styles","login","form","onSubmit","SubmitHandler","type","name","value","to","Login","formSubmitHandler","e","preventDefault","this","Component","CreateAccount","nameHandler","setState","target","submitHandler","users","state","push","console","log","isSubmitted","firstname","lastname","emailID","Mobile","userEntry","map","user","index","key","onChange","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,MAAQ,2BAA2B,KAAO,4B,mBCA5DD,EAAOC,QAAU,CAAC,KAAO,8B,4ECDzBD,EAAOC,QAAU,IAA0B,kC,kOC4B5BC,EAtBK,SAAAC,GAChB,OACI,yBAAKC,UAAWC,IAAOC,OAEf,0BAAMF,UAAWC,IAAOE,KAAMC,SAAUL,EAAMM,eAC1C,qCACA,6BACA,wBAAIL,UAAU,cACV,wBAAIA,UAAU,mBAAkB,6CAAyB,2BAAOM,KAAK,OAAOC,KAAK,cACjF,wBAAIP,UAAU,mBAAkB,6CAAyB,2BAAOM,KAAK,OAAOC,KAAK,cACjF,wBAAIP,UAAU,mBAAkB,2BAAOM,KAAK,SAASE,MAAM,UAA3D,IAAqE,kBAAC,IAAD,CAAMC,GAAG,kBAAT,kBAArE,SCgBTC,E,kDAxBX,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IAIVY,kBAAkB,SAACC,GACfA,EAAEC,kBANa,E,qDAWf,OACI,6BAEI,kBAAC,EAAD,CAAaR,cAAeS,KAAKH,yB,GAf7BI,aCkFLC,E,kDAlFX,WAAYjB,GAAQ,IAAD,8BACf,cAAMA,IAiBVkB,YAAa,SAACL,GACV,EAAKM,SAAL,eACIN,EAAEO,OAAOZ,KAAMK,EAAEO,OAAOX,SApBb,EAwBnBY,cAAc,SAACR,GACXA,EAAEC,iBACF,IAAMQ,EAAM,EAAKC,MAAMD,MACvBA,EAAME,KAAK,EAAKD,OAChBE,QAAQC,IAAIJ,GACZ,EAAKH,SAAS,CACVQ,aAAY,KA3BhB,EAAKJ,MAAM,CACRK,UAAU,GACVC,SAAS,GACTC,QAAQ,GACRC,OAAO,GACPT,MAAM,GACNK,aAAY,GATA,E,qDAmCT,IAEAK,EADSjB,KAAKQ,MAAbD,MACiBW,KAAI,SAACC,EAAKC,GAC9B,OACI,yBAAKC,IAAKD,GACN,uCAAaD,EAAKN,UAAlB,UAOZ,OACI,6BACMb,KAAKQ,MAAMI,YAcjB,6BACD,8DACCK,EAFA,eAGW,kBAAC,IAAD,CAAMtB,GAAG,KAAT,UAfP,0BAAML,SAAUU,KAAKM,cAAepB,UAAWC,IAAOE,MAClD,gDACA,6BACJ,2BAAG,+CAAH,IAA+B,2BAAOG,KAAK,OAAOE,MAAOM,KAAKQ,MAAMK,UAAWpB,KAAK,YAAY6B,SAAUtB,KAAKG,eAElH,+BAAI,8CAAJ,IAA+B,2BAAOX,KAAK,OAAOE,MAAOM,KAAKQ,MAAMM,SAAUrB,KAAK,WAAW6B,SAAUtB,KAAKG,eAC1G,2BAAG,6CAAH,IAA6B,2BAAOX,KAAK,OAAOE,MAAOM,KAAKQ,MAAMO,QAAStB,KAAK,UAAU6B,SAAUtB,KAAKG,eAC1G,+BAAI,kDAAJ,IAAmC,2BAAOX,KAAK,OAAOE,MAAOM,KAAKQ,MAAMQ,OAAQvB,KAAK,SAAS6B,SAAUtB,KAAKG,eAC5G,2BAAG,2BAAOX,KAAK,SAASN,UAAU,2B,GA5DtBe,a,OCkBbsB,MAff,WACE,OACE,yBAAKrC,UAAU,OAEX,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsC,KAAK,IAAIC,UAAW7B,EAAO8B,OAAK,IACvC,kBAAC,IAAD,CAAOF,KAAK,iBAAiBC,UAAWvB,QCJhCyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.d4cc0dc5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"LoginFields_login__3M21w\",\"form\":\"LoginFields_form__3xe6T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"CreateAccount_form__VyY9f\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from \"react-router-dom\";\r\nimport Styles from \"./LoginFields.module.css\";\r\nimport CreateAccount from \"../../CreateAccount/CreateAccount\";\r\n\r\nconst LoginFields = props => {\r\n    return (\r\n        <div className={Styles.login}>\r\n               \r\n                <form className={Styles.form} onSubmit={props.SubmitHandler}>\r\n                    <h2>Login</h2>\r\n                    <hr/>\r\n                    <ul className=\"list-group\">\r\n                        <li className=\"list-group-item\"><label>UserName :</label><input type=\"text\" name=\"username\" /></li>\r\n                        <li className=\"list-group-item\"><label>Password :</label><input type=\"text\" name=\"password\" /></li>\r\n                        <li className=\"list-group-item\"><input type=\"submit\" value='Login'/> <Link to=\"/CreateAccount\">Create Account</Link> </li>\r\n                    </ul>\r\n                   \r\n                </form>\r\n            </div>\r\n    );\r\n};\r\n\r\nLoginFields.propTypes = {\r\n    \r\n};\r\n\r\nexport default LoginFields;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Styles from \"./Login.module.css\";\r\nimport CreateAccount from '../CreateAccount/CreateAccount';\r\nimport LoginFields from './LoginFields/LoginFields';\r\n\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    formSubmitHandler=(e)=>{\r\n        e.preventDefault();\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n                <LoginFields SubmitHandler={this.formSubmitHandler}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nLogin.propTypes = {\r\n\r\n};\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Styles from \"./CreateAccount.module.css\";\r\nimport Login from \"../Login/Login\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass CreateAccount extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state={\r\n           firstname:\"\",\r\n           lastname:\"\",\r\n           emailID:\"\",\r\n           Mobile:\"\",\r\n           users:[],\r\n           isSubmitted:false\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n     \r\n\r\n    nameHandler =(e) =>{\r\n        this.setState({\r\n           [e.target.name]:e.target.value\r\n        })\r\n    }\r\n\r\n    submitHandler=(e)=>{\r\n        e.preventDefault();\r\n        const users=this.state.users;\r\n        users.push(this.state);\r\n        console.log(users);\r\n        this.setState({\r\n            isSubmitted:true\r\n        })\r\n\r\n    }\r\n\r\n    render() {     \r\n        const {users}= this.state;\r\n        const userEntry = users.map((user,index)=>{\r\n            return(\r\n                <div key={index}>\r\n                    <h3>Welcome {user.firstname} !</h3>\r\n                   \r\n                </div>\r\n\r\n            )\r\n        })  \r\n\r\n        return (\r\n            <div>\r\n                {!this.state.isSubmitted ? \r\n\r\n                <form onSubmit={this.submitHandler} className={Styles.form}>\r\n                    <h2> Create Account </h2>\r\n                    <hr/>\r\n                <p><label>First Name :</label> <input type=\"text\" value={this.state.firstname} name=\"firstname\" onChange={this.nameHandler} /></p>\r\n               \r\n             <p> <label>Last Name :</label> <input type=\"text\" value={this.state.lastname} name=\"lastname\" onChange={this.nameHandler} /></p>\r\n                <p><label>Email Id :</label> <input type=\"text\" value={this.state.emailID} name=\"emailID\" onChange={this.nameHandler} /></p>\r\n               <p> <label>Mobile Number :</label> <input type=\"text\" value={this.state.Mobile} name=\"Mobile\" onChange={this.nameHandler} /></p>\r\n                <p><input type=\"submit\" className=\"btn btn-primary\"/></p>\r\n                \r\n            </form>\r\n            :\r\n            <div>\r\n           <h2>Form submitted successfully !!</h2>\r\n           {userEntry}\r\n           Now you can <Link to=\"/\" >Login</Link>\r\n           \r\n           </div>\r\n            \r\n            }\r\n                \r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nCreateAccount.propTypes = {\r\n\r\n};\r\n\r\nexport default CreateAccount;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport CreateAccount from \"./components/CreateAccount/CreateAccount\";\nimport Login from \"./components/Login/Login\";\n\nimport {BrowserRouter as Router ,Switch ,Route} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n        <Router>\n          <Switch>\n            <Route path=\"/\" component={Login} exact />\n            <Route path=\"/CreateAccount\" component={CreateAccount}/>\n            </Switch>\n          </Router>       \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}